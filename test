#Requires -Version 5.0

# 配置区域 - 根据实际环境修改这些值
$script:SourcePath = "D:\SourceDocuments"       # 源服务器路径
$script:DestinationPath = "\\192.168.1.100\Backup"  # 目标服务器路径
$script:IncludeExtensions = @(".ppt", ".xls", ".pdf") # 需要处理的文件类型

# 初始化计数器
$global:TotalCopied = 0
$global:TotalSkipped = 0
$global:TotalProcessed = 0

function Initialize-Environment {
    # 转换扩展名为小写
    $script:IncludeExtensions = $IncludeExtensions | ForEach-Object { $_.ToLower() }
    
    # 验证源路径
    if (-not (Test-Path $script:SourcePath -PathType Container)) {
        Write-Error "源路径不存在或不可访问: $($script:SourcePath)"
        exit 1
    }

    # 标准化路径格式
    $script:SourcePath = (Convert-Path $script:SourcePath).TrimEnd('\')
    $script:DestinationPath = $script:DestinationPath.TrimEnd('\')
}

function Get-RelativePath {
    param (
        [string]$Path,
        [string]$BasePath
    )
    return $Path.Substring($BasePath.Length).TrimStart('\')
}

function Copy-FileWithProgress {
    param (
        [string]$SourceFile,
        [string]$DestinationFile
    )
    
    try {
        $destDir = Split-Path $DestinationFile -Parent
        if (-not (Test-Path $destDir)) {
            New-Item -ItemType Directory -Path $destDir -Force | Out-Null
        }
        
        # 全量模式直接覆盖
        Copy-Item -Path $SourceFile -Destination $DestinationFile -Force
        return $true
    }
    catch {
        Write-Warning "文件复制失败: $SourceFile → $DestinationFile`n错误信息: $_"
        return $false
    }
}

function Process-File {
    param (
        [string]$FilePath
    )
    
    $relativePath = Get-RelativePath -Path $FilePath -BasePath $script:SourcePath
    $destPath = Join-Path $script:DestinationPath $relativePath
    
    if ($script:IncludeExtensions -contains [System.IO.Path]::GetExtension($FilePath).ToLower()) {
        $global:TotalProcessed++
        
        if (Copy-FileWithProgress $FilePath $destPath) {
            $global:TotalCopied++
            Write-Host "已复制: $FilePath" -ForegroundColor Green
        }
        else {
            $global:TotalSkipped++
            Write-Host "已跳过: $FilePath" -ForegroundColor Gray
        }
    }
}

# 主程序流程
try {
    Initialize-Environment

    Write-Host "开始全量同步操作..."
    Write-Host "源路径: $($script:SourcePath)"
    Write-Host "目标路径: $($script:DestinationPath)"
    Write-Host "处理文件类型: $($script:IncludeExtensions -join ', ')"

    # 使用高效文件枚举
    $allFiles = [System.IO.Directory]::EnumerateFiles(
        $script:SourcePath, 
        "*.*", 
        [System.IO.SearchOption]::AllDirectories
    )

    # 分批次处理
    $batchSize = 2000
    $currentBatch = New-Object System.Collections.Generic.List[string]

    foreach ($file in $allFiles) {
        $currentBatch.Add($file)
        
        if ($currentBatch.Count -ge $batchSize) {
            $currentBatch | ForEach-Object { Process-File $_ }
            $currentBatch.Clear()
        }
    }
    
    # 处理剩余文件
    if ($currentBatch.Count -gt 0) {
        $currentBatch | ForEach-Object { Process-File $_ }
    }
}
catch {
    Write-Error "发生严重错误: $_"
    exit 1
}
finally {
    Write-Host "`n同步操作完成"
    Write-Host "符合条件文件总数: $global:TotalProcessed"
    Write-Host "成功复制文件数: $global:TotalCopied"
    Write-Host "失败文件数: $global:TotalSkipped"
}
